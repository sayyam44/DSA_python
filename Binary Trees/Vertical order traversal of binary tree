import collections

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
        self.hd=float('inf')
        self.level=-1

class Solution:
    
    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
        dic = collections.defaultdict(list) #defining a dict with values as empty lists
        q = collections.deque([[root, 0, 0]]) #val,hd,level

        while q:
            for i in range (len(q)):
                node,x,y=q.popleft()
                dic[x].append((y,node.val)) # hd->level,val #eg. vertical={0:[0,3],-1:[1,9]....etc}

                if node.left:
                    q.append(node.left,x-1,y+1) # going down if node. left is present then hd by -1 and level by +1 
                if node.right:
                    q.append(node.left,x+1,y+1) # going down if node. left is present then hd by +1 and level by +1 
        
        output = []
        for x in sorted(dic.keys()): #firstly - here we are sorting dict on hd values
            column = [i[1] for i in sorted(dic[x])]
            #here we are creating a list which contains the values on a particular hd on the basis of 
            # incereasing levels.
            output.append(column)
        
        return output
